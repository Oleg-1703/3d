#!/usr/bin/env python3
"""
–ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏ —Å—Ä–∞–∑—É —Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ
"""

import os
import sys

print("üöÄ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï train.py")
print("=" * 50)

# ===== 1. –ò–°–ü–†–ê–í–õ–Ø–ï–ú BASICPOINTCLOUD =====
print("1Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º BasicPointCloud...")

gaussian_model_file = "scene/gaussian_model.py"

if os.path.exists(gaussian_model_file):
    with open(gaussian_model_file, 'r') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ BasicPointCloud
    if 'class BasicPointCloud' not in content:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        basic_point_cloud = '''from typing import NamedTuple
import numpy as np

class BasicPointCloud(NamedTuple):
    points: np.array
    colors: np.array
    normals: np.array

'''
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        lines = content.split('\\n')
        insert_index = 0
        for i, line in enumerate(lines):
            if line.startswith('import ') or line.startswith('from '):
                insert_index = max(insert_index, i + 1)
        
        lines.insert(insert_index, basic_point_cloud)
        content = '\\n'.join(lines)
        
        with open(gaussian_model_file, 'w') as f:
            f.write(content)
        
        print("‚úÖ BasicPointCloud –¥–æ–±–∞–≤–ª–µ–Ω –≤ scene/gaussian_model.py")
    else:
        print("‚úÖ BasicPointCloud —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
else:
    print("‚ùå scene/gaussian_model.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

# ===== 2. –ò–°–ü–†–ê–í–õ–Ø–ï–ú TRAIN.PY =====
print("\\n2Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º device errors –≤ train.py...")

if os.path.exists('train.py'):
    with open('train.py', 'r') as f:
        train_content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    with open('train.py.backup', 'w') as f:
        f.write(train_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø train.py.backup")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: max_radii2D
    old_problem = 'gaussians.max_radii2D[visibility_filter] = torch.max(gaussians.max_radii2D[visibility_filter], radii[visibility_filter])'
    new_solution = '''# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï DEVICE ERROR
                if gaussians.max_radii2D.device != radii.device:
                    radii = radii.to(gaussians.max_radii2D.device)
                if gaussians.max_radii2D.device != visibility_filter.device:
                    visibility_filter = visibility_filter.to(gaussians.max_radii2D.device)
                gaussians.max_radii2D[visibility_filter] = torch.max(gaussians.max_radii2D[visibility_filter], radii[visibility_filter])'''
    
    if old_problem in train_content:
        train_content = train_content.replace(old_problem, new_solution)
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ max_radii2D")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: cuda() calls
    cuda_fixes = [
        ('gt_obj = viewpoint_cam.objects.cuda().long()', 
         'device = next(gaussians.parameters()).device if gaussians.get_xyz.numel() > 0 else torch.device("cuda")\\n        gt_obj = viewpoint_cam.objects.to(device).long() if hasattr(viewpoint_cam, "objects") and viewpoint_cam.objects is not None else None'),
        
        ('objects.float().cuda().unsqueeze', 'objects.float().to(device).unsqueeze'),
        
        ('background = torch.tensor(bg_color, dtype=torch.float32, device="cuda")', 
         'device = next(gaussians.parameters()).device if gaussians.get_xyz.numel() > 0 else torch.device("cuda")\\n    background = torch.tensor(bg_color, dtype=torch.float32, device=device)'),
    ]
    
    for old, new in cuda_fixes:
        if old in train_content:
            train_content = train_content.replace(old, new)
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {old[:40]}...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('train.py', 'w') as f:
        f.write(train_content)
    
    print("‚úÖ train.py –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")

else:
    print("‚ùå train.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

# ===== 3. –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–†–£–ö–¢–£–†–£ =====
print("\\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö...")

required_dirs = [
    "data/dataset/images",
    "data/dataset/sparse/0", 
    "config/gaussian_dataset",
    "output"
]

for dir_path in required_dirs:
    if not os.path.exists(dir_path):
        os.makedirs(dir_path, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
    else:
        print(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_path}")

# ===== 4. –°–û–ó–î–ê–ï–ú –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ =====
config_path = "config/gaussian_dataset/train.json"
if not os.path.exists(config_path):
    config_content = '''{
    "densify_until_iter": 10000,
    "num_classes": 256,
    "reg3d_interval": 5,
    "reg3d_k": 5,
    "reg3d_lambda_val": 2,
    "reg3d_max_points": 200000,
    "reg3d_sample_size": 1000
}'''
    with open(config_path, 'w') as f:
        f.write(config_content)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_path}")

# ===== 5. –ü–†–û–í–ï–†–Ø–ï–ú –î–ê–ù–ù–´–ï =====
print("\\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...")

if os.path.exists("data/dataset/images"):
    images = [f for f in os.listdir("data/dataset/images") if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
    if len(images) == 0:
        print("‚ö†Ô∏è  –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ data/dataset/images/")
else:
    print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/dataset/images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

if os.path.exists("data/dataset/sparse/0"):
    colmap_files = ['cameras.bin', 'images.bin', 'points3D.bin']
    found_files = [f for f in colmap_files if os.path.exists(f"data/dataset/sparse/0/{f}")]
    print(f"üóÇÔ∏è  COLMAP —Ñ–∞–π–ª–æ–≤: {len(found_files)}/{len(colmap_files)}")
    if len(found_files) == 0:
        print("‚ö†Ô∏è  –ü–æ–º–µ—Å—Ç–∏—Ç–µ COLMAP –¥–∞–Ω–Ω—ã–µ –≤ data/dataset/sparse/0/")
        print("   –ù—É–∂–Ω—ã —Ñ–∞–π–ª—ã: cameras.bin, images.bin, points3D.bin")
else:
    print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/dataset/sparse/0 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# ===== –§–ò–ù–ê–õ =====
print("\\n" + "=" * 50)
print("üéØ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!")
