#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å BCE –Ω–∞ CrossEntropy loss –≤ train.py
# –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è Gaussian Grouping —Å –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –º–∞—Å–∫–∞–º–∏

echo "üîß –ü–µ—Ä–µ—Ö–æ–¥ —Å BCE –Ω–∞ CrossEntropy loss –¥–ª—è Gaussian Grouping..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª train.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -f "train.py" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª train.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
cp train.py train_bce_backup.py
echo "‚úì –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: train_bce_backup.py"

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã
cat > fix_train_crossentropy.py << 'EOF'
#!/usr/bin/env python3
import re

def fix_train_file():
    with open('train.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 1. –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å –±–ª–æ–∫ —Å BCE –Ω–∞ CrossEntropy
    bce_pattern = r'''                    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –±–∏–Ω–∞—Ä–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è 2 –∫–ª–∞—Å—Å–æ–≤
                    if dataset\.num_classes == 2:
                        # –î–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º BCEWithLogitsLoss
                        logits_binary = logits\[:, 1:2, :, :\]  # –ö–∞–Ω–∞–ª –æ–±—ä–µ–∫—Ç–∞ \[1,1,H,W\]
                        target_binary = \(target > 0\)\.float\(\)\.unsqueeze\(1\)  # \[1,1,H,W\]
                        .*?pos_weight = .*?
                        bce_loss = torch\.nn\.BCEWithLogitsLoss\(reduction='mean', pos_weight=pos_weight\)
                        loss_obj = bce_loss\(logits_binary, target_binary\)
                    else:
                        # –î–ª—è –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º CrossEntropyLoss
                        loss_obj = cls_criterion\(logits, target\)\.mean\(\)
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è object loss
                    if dataset\.num_classes > 1:
                        loss_obj = loss_obj / torch\.log\(torch\.tensor\(float\(dataset\.num_classes\), device=device\)\)'''

    crossentropy_replacement = '''                    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Gaussian Grouping object loss —Å CrossEntropy
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ target –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è CrossEntropy (0=—Ñ–æ–Ω, 1=–æ–±—ä–µ–∫—Ç)
                    if target.max() > 1:
                        # –ï—Å–ª–∏ –º–∞—Å–∫–∏ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è >1, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –±–∏–Ω–∞—Ä–Ω–æ–º—É
                        target = (target > 0).long()
                    
                    # CrossEntropy –æ–∂–∏–¥–∞–µ—Ç target –∫–∞–∫ [batch, H, W] —Å –∫–ª–∞—Å—Å–∞–º–∏ 0,1
                    loss_obj = cls_criterion(logits, target)  # [1, H, W] 
                    loss_obj = loss_obj.mean()  # –°–∫–∞–ª—è—Ä
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è 2 –∫–ª–∞—Å—Å–æ–≤ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º Gaussian Grouping
                    loss_obj = loss_obj / torch.log(torch.tensor(2.0, dtype=torch.float32, device=device))
                    
                    print(f"CrossEntropy loss (2 classes): {loss_obj.item():.4f}")'''
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å —É—á–µ—Ç–æ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    content = re.sub(bce_pattern, crossentropy_replacement, content, flags=re.DOTALL | re.MULTILINE)
    
    # 2. –£–±–∏—Ä–∞–µ–º –≤—Å–µ debug –ø—Ä–∏–Ω—Ç—ã BCE
    content = re.sub(r'\s*print\(f"  logits_binary shape:.*?\)\n', '', content)
    content = re.sub(r'\s*print\(f"  target_binary shape:.*?\)\n', '', content)
    content = re.sub(r'\s*print\(f"  BCEWithLogitsLoss result:.*?\)\n', '', content)
    
    # 3. –£–ø—Ä–æ—â–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (—É–±–∏—Ä–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é)
    content = content.replace(
        'objects_input = objects[0:1].unsqueeze(0)  # [1, 1, H, W]\n'
        '                    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n'
        '                    objects_input = (objects_input - objects_input.mean()) / (objects_input.std() + 1e-8)',
        'objects_input = objects[0:1].unsqueeze(0)  # [1, 1, H, W]'
    )
    
    # 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π learning rate
    content = content.replace(
        'cls_optimizer = torch.optim.Adam(classifier.parameters(), lr=1e-5)',
        'cls_optimizer = torch.optim.Adam(classifier.parameters(), lr=5e-4)'
    )
    
    # 5. –£–±–∏—Ä–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–µ—Å–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    content = re.sub(r'# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤.*?\n.*?torch\.nn\.init\.constant_\(classifier\.bias, 0\.0\)\n', '', content, flags=re.DOTALL)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('train.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úì –ó–∞–º–µ–Ω–µ–Ω BCE loss –Ω–∞ CrossEntropy loss")
    print("‚úì –£–¥–∞–ª–µ–Ω—ã debug –ø—Ä–∏–Ω—Ç—ã BCE")
    print("‚úì –£–ø—Ä–æ—â–µ–Ω—ã –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
    print("‚úì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π learning rate")

if __name__ == "__main__":
    fix_train_file()
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
python3 fix_train_crossentropy.py

# –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
rm fix_train_crossentropy.py

echo ""
echo "üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´:"
echo "‚úì BCE loss –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ CrossEntropy loss"
echo "‚úì –£–±—Ä–∞–Ω—ã –≤—Å–µ debug –ø—Ä–∏–Ω—Ç—ã BCE"
echo "‚úì –£–ø—Ä–æ—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
echo "‚úì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π learning rate (5e-4)"
echo ""
echo "üìä –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:"
echo "‚Ä¢ Object loss –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.1-0.7"
echo "‚Ä¢ –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ" 
echo "‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π Gaussian Grouping"
echo ""
echo "üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ:"
echo "python3 train.py -s data/dataset -r 1 -m output/dataset --config_file config/gaussian_dataset/train.json"
echo ""
echo "üìÅ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø BCE –≤–µ—Ä—Å–∏–∏: train_bce_backup.py"