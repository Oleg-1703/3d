#!/usr/bin/env python3

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É n_views –≤ scene/dataset_readers.py
with open('scene/dataset_readers.py', 'r') as f:
    content = f.read()

# –°–æ–∑–¥–∞–µ–º backup
with open('scene/dataset_readers.py.nviews_final.backup', 'w') as f:
    f.write(content)

# –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –ª–æ–≥–∏–∫—É
old_logic = '''            elif isinstance(n_views,int):
                idx_sub = np.linspace(0, len(train_cam_infos)-1, n_views) # 3views
                idx_sub = [round(i) for i in idx_sub]
                train_cam_infos = [train_cam_infos[i_sub] for i_sub in idx_sub]
                print(train_cam_infos)'''

new_logic = '''            elif isinstance(n_views,int):
                print(f"üîç n_views={n_views}, –¥–æ—Å—Ç—É–ø–Ω–æ –∫–∞–º–µ—Ä: {len(train_cam_infos)}")
                if n_views >= len(train_cam_infos):
                    print("‚úÖ n_views >= –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∫–∞–º–µ—Ä—ã
                    pass
                else:
                    print(f"üìä –í—ã–±–∏—Ä–∞–µ–º {n_views} –∫–∞–º–µ—Ä –∏–∑ {len(train_cam_infos)}")
                    idx_sub = np.linspace(0, len(train_cam_infos)-1, n_views)
                    idx_sub = [round(i) for i in idx_sub]
                    train_cam_infos = [train_cam_infos[i_sub] for i_sub in idx_sub]
                    print(f"   –í—ã–±—Ä–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã: {idx_sub}")'''

content = content.replace(old_logic, new_logic)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
with open('scene/dataset_readers.py', 'w') as f:
    f.write(content)

print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ n_views —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
print("–¢–µ–ø–µ—Ä—å –ø—Ä–∏ n_views >= –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–º–µ—Ä –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ –∫–∞–º–µ—Ä—ã")