#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–°–û–ö
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGB –º–∞—Å–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –º–∞—Å–∫–∏ 0/1
"""

import os
import argparse
import numpy as np
from PIL import Image
from tqdm import tqdm
import shutil


def convert_masks_to_binary(mask_dir: str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Å–∫–∏ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    
    backup_dir = mask_dir.rstrip("/\\") + "_original"

    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Å–æ–∫
    if not os.path.exists(backup_dir):
        print("üì¶ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Å–æ–∫...")
        os.makedirs(backup_dir)

        for filename in os.listdir(mask_dir):
            if filename.endswith('.png'):
                src = os.path.join(mask_dir, filename)
                dst = os.path.join(backup_dir, filename)
                shutil.copy2(src, dst)

        print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ {backup_dir}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å–æ–∫
    mask_files = [f for f in os.listdir(mask_dir) if f.endswith('.png')]
    print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º {len(mask_files)} –º–∞—Å–æ–∫...")

    converted_count = 0

    for filename in tqdm(mask_files, desc="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–∞—Å–æ–∫"):
        mask_path = os.path.join(mask_dir, filename)

        try:
            mask = np.array(Image.open(mask_path))

            if len(mask.shape) == 3:
                mask = mask[:, :, 0]

            binary_mask = (mask > 0).astype(np.uint8)

            unique_vals = np.unique(binary_mask)
            if set(unique_vals) <= {0, 1}:
                Image.fromarray(binary_mask).save(mask_path)
                converted_count += 1
            else:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å {filename}: {unique_vals}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å {filename}: {e}")

    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {converted_count} –º–∞—Å–æ–∫")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
    test_files = mask_files[:3]

    for filename in test_files:
        try:
            mask = np.array(Image.open(os.path.join(mask_dir, filename)))
            unique_vals = np.unique(mask)
            object_percent = (mask > 0).sum() / mask.size * 100

            print(f"{filename}:")
            print(f"  –†–∞–∑–º–µ—Ä: {mask.shape}")
            print(f"  –ó–Ω–∞—á–µ–Ω–∏—è: {unique_vals}")
            print(f"  –û–±—ä–µ–∫—Ç: {object_percent:.1f}%")

            if set(unique_vals) == {0, 1}:
                print("  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –±–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞")
            else:
                print("  ‚ùå –í—Å–µ –µ—â–µ –Ω–µ –±–∏–Ω–∞—Ä–Ω–∞—è!")
            print()

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RGB –º–∞—Å–æ–∫ –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ")
    parser.add_argument("--mask_dir", type=str, required=True, help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–∞—Å–∫–∞–º–∏ (.png)")
    args = parser.parse_args()

    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–°–û–ö –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò")
    print("=" * 60)

    convert_masks_to_binary(args.mask_dir)

    print("\nüéØ –ú–ê–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!")
