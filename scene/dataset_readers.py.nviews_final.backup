# Copyright (C) 2023, Gaussian-Grouping
# Gaussian-Grouping research group, https://github.com/lkeab/gaussian-grouping
# All rights reserved.
#
# ------------------------------------------------------------------------
# Modified from codes in Gaussian-Splatting 
# GRAPHDECO research group, https://team.inria.fr/graphdeco

import os
import sys
from PIL import Image
from typing import NamedTuple
from scene.colmap_loader import read_extrinsics_text, read_intrinsics_text, qvec2rotmat, \
    read_extrinsics_binary, read_intrinsics_binary, read_points3D_binary, read_points3D_text
from utils.graphics_utils import getWorld2View2, focal2fov, fov2focal
import numpy as np
import json
from pathlib import Path
from plyfile import PlyData, PlyElement
from utils.sh_utils import SH2RGB
from scene.gaussian_model import BasicPointCloud

class CameraInfo(NamedTuple):
    uid: int
    R: np.array
    T: np.array
    FovY: np.array
    FovX: np.array
    image: np.array
    image_path: str
    image_name: str
    width: int
    height: int
    objects: np.array

class SceneInfo(NamedTuple):
    point_cloud: BasicPointCloud
    train_cameras: list
    test_cameras: list
    nerf_normalization: dict
    ply_path: str

def getNerfppNorm(cam_info):
    def get_center_and_diag(cam_centers):
        if len(cam_centers) == 0:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä")
            return np.array([0.0, 0.0, 0.0]), 1.0
            
        cam_centers = np.hstack(cam_centers)
        avg_cam_center = np.mean(cam_centers, axis=1, keepdims=True)
        center = avg_cam_center
        dist = np.linalg.norm(cam_centers - center, axis=0, keepdims=True)
        diagonal = np.max(dist)
        return center.flatten(), diagonal

    if len(cam_info) == 0:
        print("‚ùå getNerfppNorm: –ù–µ—Ç –∫–∞–º–µ—Ä –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
        return {"translate": np.array([0.0, 0.0, 0.0]), "radius": 1.0}

    cam_centers = []

    for cam in cam_info:
        try:
            W2C = getWorld2View2(cam.R, cam.T)
            C2W = np.linalg.inv(W2C)
            cam_centers.append(C2W[:3, 3:4])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–º–µ—Ä—ã {getattr(cam, 'image_name', 'unknown')}: {e}")
            continue

    if len(cam_centers) == 0:
        print("‚ùå getNerfppNorm: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—Ç—Ä—ã –∫–∞–º–µ—Ä")
        return {"translate": np.array([0.0, 0.0, 0.0]), "radius": 1.0}

    center, diagonal = get_center_and_diag(cam_centers)
    radius = diagonal * 1.1

    translate = -center

    print(f"‚úÖ NeRF –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: {len(cam_centers)} –∫–∞–º–µ—Ä, —Ä–∞–¥–∏—É—Å={radius:.3f}")
    return {"translate": translate, "radius": radius}

def readColmapCameras(cam_extrinsics, cam_intrinsics, images_folder, objects_folder):
    cam_infos = []
    for idx, key in enumerate(cam_extrinsics):
        sys.stdout.write('\r')
        # the exact output you're looking for:
        sys.stdout.write("Reading camera {}/{}".format(idx+1, len(cam_extrinsics)))
        sys.stdout.flush()

        extr = cam_extrinsics[key]
        intr = cam_intrinsics[extr.camera_id]
        height = intr.height
        width = intr.width

        uid = intr.id
        R = np.transpose(qvec2rotmat(extr.qvec))
        T = np.array(extr.tvec)

        if intr.model=="SIMPLE_PINHOLE":
            focal_length_x = intr.params[0]
            FovY = focal2fov(focal_length_x, height)
            FovX = focal2fov(focal_length_x, width)
        elif intr.model=="PINHOLE":
            focal_length_x = intr.params[0]
            focal_length_y = intr.params[1]
            FovY = focal2fov(focal_length_y, height)
            FovX = focal2fov(focal_length_x, width)
        else:
            assert False, "Colmap camera model not handled: only undistorted datasets (PINHOLE or SIMPLE_PINHOLE cameras) supported!"

        image_path = os.path.join(images_folder, os.path.basename(extr.name))
        image_name = os.path.basename(image_path).split(".")[0]
        image = Image.open(image_path) if os.path.exists(image_path) else None
        object_path = os.path.join(objects_folder, image_name + '.png')
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –û–ë–™–ï–ö–¢–ù–´–• –ú–ê–°–û–ö
        if os.path.exists(object_path):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Å–∫—É –∫–∞–∫ numpy array —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            object_mask_pil = Image.open(object_path)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            if image is not None and object_mask_pil.size != image.size:
                print(f"‚ö†Ô∏è  –†–µ—Å–∞–π–∑ –º–∞—Å–∫–∏ {image_name}: {object_mask_pil.size} -> {image.size}")
                object_mask_pil = object_mask_pil.resize(image.size, Image.NEAREST)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            objects = np.array(object_mask_pil)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞ [0, 1]
            if objects.max() > 1:
                objects = (objects > 0).astype(np.uint8)
            
            print(f"‚úì –ú–∞—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ {image_name}: shape={objects.shape}, unique={np.unique(objects)}")
        else:
            print(f"‚ùå –ú–∞—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {object_path}")
            objects = None

        cam_info = CameraInfo(uid=uid, R=R, T=T, FovY=FovY, FovX=FovX, image=image,
                              image_path=image_path, image_name=image_name, width=width, height=height, objects=objects)
        cam_infos.append(cam_info)
    sys.stdout.write('\n')
    return cam_infos

def fetchPly(path):
    plydata = PlyData.read(path)
    vertices = plydata['vertex']
    positions = np.vstack([vertices['x'], vertices['y'], vertices['z']]).T
    colors = np.vstack([vertices['red'], vertices['green'], vertices['blue']]).T / 255.0
    normals = np.vstack([vertices['nx'], vertices['ny'], vertices['nz']]).T
    return BasicPointCloud(points=positions, colors=colors, normals=normals)

def storePly(path, xyz, rgb):
    # Define the dtype for the structured array
    dtype = [('x', 'f4'), ('y', 'f4'), ('z', 'f4'),
            ('nx', 'f4'), ('ny', 'f4'), ('nz', 'f4'),
            ('red', 'u1'), ('green', 'u1'), ('blue', 'u1')]
    
    normals = np.zeros_like(xyz)

    elements = np.empty(xyz.shape[0], dtype=dtype)
    attributes = np.concatenate((xyz, normals, rgb), axis=1)
    elements[:] = list(map(tuple, attributes))

    # Create the PlyData object and write to file
    vertex_element = PlyElement.describe(elements, 'vertex')
    ply_data = PlyData([vertex_element])
    ply_data.write(path)

def readColmapSceneInfo(path, images, eval, object_path, n_views=None, random_init=False, train_split=None):
    try:
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã
        cameras_extrinsic_file = os.path.join(path, "sparse_fixed/0", "images.bin")
        cameras_intrinsic_file = os.path.join(path, "sparse_fixed/0", "cameras.bin")
        cam_extrinsics = read_extrinsics_binary(cameras_extrinsic_file)
        cam_intrinsics = read_intrinsics_binary(cameras_intrinsic_file)
        reading_dir = "images" if images == None else images
        object_dir = "object_mask" if object_path == None else object_path
        print("‚úì –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã –∏–∑ sparse_fixed/0/")
    except:
        try:
            # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
            cameras_extrinsic_file = os.path.join(path, "sparse/0", "images.bin")
            cameras_intrinsic_file = os.path.join(path, "sparse/0", "cameras.bin")
            cam_extrinsics = read_extrinsics_binary(cameras_extrinsic_file)
            cam_intrinsics = read_intrinsics_binary(cameras_intrinsic_file)
            reading_dir = "images" if images == None else images
            object_dir = "object_mask" if object_path == None else object_path
            print("‚ö† –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã –∏–∑ sparse/0/")
        except:
            cam_extrinsics = read_extrinsics_text(os.path.join(path, "sparse/0", "images.txt"))
            cam_intrinsics = read_intrinsics_text(os.path.join(path, "sparse/0", "cameras.txt"))
            reading_dir = "images" if images == None else images
            object_dir = "object_mask" if object_path == None else object_path
            print("‚úì –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑ sparse/0/")

    cam_infos_unsorted = readColmapCameras(cam_extrinsics=cam_extrinsics, cam_intrinsics=cam_intrinsics, images_folder=os.path.join(path, reading_dir), objects_folder=os.path.join(path, object_dir))
    cam_infos = sorted(cam_infos_unsorted.copy(), key = lambda x : x.image_name)
    
    print(f"üîç –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–º–µ—Ä: {len(cam_infos)}")
    for i, cam in enumerate(cam_infos[:3]):
        print(f"  –ö–∞–º–µ—Ä–∞ {i}: {cam.image_name}")
    
    if eval:
        train_cam_infos = [c for idx, c in enumerate(cam_infos) if idx % 4 != 0]
        test_cam_infos = [c for idx, c in enumerate(cam_infos) if idx % 4 == 0]
        print(f"üìä eval=True: train={len(train_cam_infos)}, test={len(test_cam_infos)}")
    else:
        train_cam_infos = cam_infos
        test_cam_infos = []
        print(f"üìä eval=False: train={len(train_cam_infos)}, test={len(test_cam_infos)}")
    
    if len(train_cam_infos) == 0:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: train_cam_infos –ø—É—Å—Ç–æ–π!")
        print(f"   eval={eval}, len(cam_infos)={len(cam_infos)}")
        if eval and len(cam_infos) > 0:
            print("   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∫–∞–º–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            train_cam_infos = cam_infos
        else:
            raise RuntimeError("–ù–µ—Ç –∫–∞–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if n_views is not None:
        if train_split is not None:
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/test –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é
            n_train = int(n_views * train_split)
            n_test = n_views - n_train
            train_cam_infos = train_cam_infos[:n_train]
            test_cam_infos = test_cam_infos[:n_test] if test_cam_infos else []
        else:
            train_cam_infos = train_cam_infos[:n_views]
            
    nerf_normalization = getNerfppNorm(train_cam_infos)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–µ—á–Ω–æ–µ –æ–±–ª–∞–∫–æ
    ply_path = os.path.join(path, "sparse_fixed/0/points3D.ply")
    if not os.path.exists(ply_path):
        ply_path = os.path.join(path, "sparse/0/points3D.ply")
    if not os.path.exists(ply_path):
        print("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º points3D.bin –≤ .ply...")
        try:
            bin_path = os.path.join(path, "sparse_fixed/0/points3D.bin")
            if not os.path.exists(bin_path):
                bin_path = os.path.join(path, "sparse/0/points3D.bin")
            xyz, rgb, _ = read_points3D_binary(bin_path)
        except:
            txt_path = os.path.join(path, "sparse/0/points3D.txt")
            xyz, rgb, _ = read_points3D_text(txt_path)
        storePly(ply_path, xyz, rgb)

    try:
        pcd = fetchPly(ply_path)
    except:
        pcd = None

    scene_info = SceneInfo(point_cloud=pcd,
                          train_cameras=train_cam_infos,
                          test_cameras=test_cam_infos,
                          nerf_normalization=nerf_normalization,
                          ply_path=ply_path)
    return scene_info
def readCamerasFromTransforms(path, transformsfile, white_background, extension=".png"):
    cam_infos = []

    with open(os.path.join(path, transformsfile)) as json_file:
        contents = json.load(json_file)
        fovx = contents["camera_angle_x"]

        frames = contents["frames"]
        for idx, frame in enumerate(frames):
            cam_name = os.path.join(path, frame["file_path"] + extension)

            # NeRF 'transform_matrix' is a camera-to-world transform
            c2w = np.array(frame["transform_matrix"])
            # change from OpenGL/Blender camera axes (Y up, Z back) to COLMAP (Y down, Z forward)
            c2w[:3, 1:3] *= -1

            # get the world-to-camera transform and set R, T
            w2c = np.linalg.inv(c2w)
            R = np.transpose(w2c[:3,:3])  # R is stored transposed due to 'glm' in CUDA code
            T = w2c[:3, 3]

            image_path = os.path.join(path, cam_name)
            image_name = Path(cam_name).stem
            image = Image.open(image_path)

            im_data = np.array(image.convert("RGBA"))

            bg = np.array([1,1,1]) if white_background else np.array([0, 0, 0])

            norm_data = im_data / 255.0
            arr = norm_data[:,:,:3] * norm_data[:, :, 3:4] + bg * (1 - norm_data[:, :, 3:4])
            image = Image.fromarray(np.array(arr*255.0, dtype=np.byte), "RGB")

            fovy = focal2fov(fov2focal(fovx, image.size[0]), image.size[1])
            FovY = fovy 
            FovX = fovx

            cam_infos.append(CameraInfo(uid=idx, R=R, T=T, FovY=FovY, FovX=FovX, image=image,
                            image_path=image_path, image_name=image_name, width=image.size[0], height=image.size[1]))
            
    return cam_infos

def readNerfSyntheticInfo(path, white_background, eval, extension=".png"):
    print("Reading Training Transforms")
    train_cam_infos = readCamerasFromTransforms(path, "transforms_train.json", white_background, extension)
    print("Reading Test Transforms")
    test_cam_infos = readCamerasFromTransforms(path, "transforms_test.json", white_background, extension)
    
    if not eval:
        train_cam_infos.extend(test_cam_infos)
        test_cam_infos = []

    nerf_normalization = getNerfppNorm(train_cam_infos)

    ply_path = os.path.join(path, "points3d.ply")
    if not os.path.exists(ply_path):
        # Since this data set has no colmap data, we start with random points
        num_pts = 100_000
        print(f"Generating random point cloud ({num_pts})...")
        
        # We create random points inside the bounds of the synthetic Blender scenes
        xyz = np.random.random((num_pts, 3)) * 2.6 - 1.3
        shs = np.random.random((num_pts, 3)) / 255.0
        pcd = BasicPointCloud(points=xyz, colors=SH2RGB(shs), normals=np.zeros((num_pts, 3)))

        storePly(ply_path, xyz, SH2RGB(shs) * 255)
    try:
        pcd = fetchPly(ply_path)
    except:
        pcd = None

    scene_info = SceneInfo(point_cloud=pcd,
                           train_cameras=train_cam_infos,
                           test_cameras=test_cam_infos,
                           nerf_normalization=nerf_normalization,
                           ply_path=ply_path)
    return scene_info

sceneLoadTypeCallbacks = {
    "Colmap": readColmapSceneInfo,
    "Blender" : readNerfSyntheticInfo
}