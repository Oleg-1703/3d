#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–°–û–ö
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGB –º–∞—Å–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –º–∞—Å–∫–∏ 0/1
"""

import os
import numpy as np
from PIL import Image
from tqdm import tqdm

def convert_masks_to_binary():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Å–∫–∏ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    
    mask_dir = 'data/dataset/object_mask'
    backup_dir = 'data/dataset/object_mask_original'
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Å–æ–∫
    if not os.path.exists(backup_dir):
        print("üì¶ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Å–æ–∫...")
        os.makedirs(backup_dir)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –±—ç–∫–∞–ø
        import shutil
        for filename in os.listdir(mask_dir):
            if filename.endswith('.png'):
                src = os.path.join(mask_dir, filename)
                dst = os.path.join(backup_dir, filename)
                shutil.copy2(src, dst)
        
        print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ {backup_dir}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å–æ–∫
    mask_files = [f for f in os.listdir(mask_dir) if f.endswith('.png')]
    print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º {len(mask_files)} –º–∞—Å–æ–∫...")
    
    converted_count = 0
    
    for filename in tqdm(mask_files, desc="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–∞—Å–æ–∫"):
        mask_path = os.path.join(mask_dir, filename)
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Å–∫—É
            mask = np.array(Image.open(mask_path))
            
            # –ï—Å–ª–∏ RGB, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
            if len(mask.shape) == 3:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –∏–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ
                mask = mask[:, :, 0]  # –∏–ª–∏ np.mean(mask, axis=2)
            
            # –ë–∏–Ω–∞—Ä–∏–∑—É–µ–º: –≤—Å–µ —á—Ç–æ > 0 —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 1
            binary_mask = (mask > 0).astype(np.uint8)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±–∏–Ω–∞—Ä–Ω—É—é –º–∞—Å–∫—É
            unique_vals = np.unique(binary_mask)
            if set(unique_vals) <= {0, 1}:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–Ω–∞—Ä–Ω—É—é –º–∞—Å–∫—É
                Image.fromarray(binary_mask).save(mask_path)
                converted_count += 1
            else:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å {filename}: {unique_vals}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å {filename}: {e}")
    
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {converted_count} –º–∞—Å–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
    test_files = mask_files[:3]
    
    for filename in test_files:
        try:
            mask = np.array(Image.open(os.path.join(mask_dir, filename)))
            unique_vals = np.unique(mask)
            object_percent = (mask > 0).sum() / mask.size * 100
            
            print(f"{filename}:")
            print(f"  –†–∞–∑–º–µ—Ä: {mask.shape}")
            print(f"  –ó–Ω–∞—á–µ–Ω–∏—è: {unique_vals}")
            print(f"  –û–±—ä–µ–∫—Ç: {object_percent:.1f}%")
            
            if set(unique_vals) == {0, 1}:
                print("  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –±–∏–Ω–∞—Ä–Ω–∞—è –º–∞—Å–∫–∞")
            else:
                print("  ‚ùå –í—Å–µ –µ—â–µ –Ω–µ –±–∏–Ω–∞—Ä–Ω–∞—è!")
            print()
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

def check_camera_loading():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –º–∞—Å–∫–∏ –≤ –∫–∞–º–µ—Ä–∞—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞—Å–æ–∫ –≤ dataset...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ dataset –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Å–∫–∏
    test_code = '''
import sys
sys.path.append('.')
from scene.dataset_readers import readColmapSceneInfo
from arguments import ModelParams

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
class TestArgs:
    source_path = "data/dataset"
    images = "images"
    eval = False
    object_path = "object_mask"
    n_views = 100
    random_init = False
    train_split = False

try:
    scene_info = readColmapSceneInfo(
        TestArgs.source_path, 
        TestArgs.images, 
        TestArgs.eval, 
        TestArgs.object_path,
        n_views=TestArgs.n_views,
        random_init=TestArgs.random_init,
        train_split=TestArgs.train_split
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –∫–∞–º–µ—Ä—É
    if scene_info.train_cameras and len(scene_info.train_cameras) > 0:
        cam = scene_info.train_cameras[0]
        if hasattr(cam, 'objects') and cam.objects is not None:
            print(f"‚úÖ –û–±—ä–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {cam.objects.shape}")
            if hasattr(cam.objects, 'unique'):
                unique_vals = cam.objects.unique() if hasattr(cam.objects, 'unique') else set(cam.objects.flatten())
                print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {unique_vals}")
            else:
                import numpy as np
                unique_vals = np.unique(cam.objects)
                print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {unique_vals}")
        else:
            print("‚ùå –û–±—ä–µ–∫—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    else:
        print("‚ùå –ù–µ—Ç –∫–∞–º–µ—Ä")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    '''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    with open('test_loading.py', 'w') as f:
        f.write(test_code)
    
    print("–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≥—Ä—É–∑–∫–∏...")
    os.system('python3 test_loading.py')
    os.remove('test_loading.py')

if __name__ == "__main__":
    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–°–û–ö –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò")
    print("=" * 60)
    
    convert_masks_to_binary()
    check_camera_loading()
    
    print("\nüéØ –ú–ê–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!")
    print("–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–π—Ç–µ train.py —Å–Ω–æ–≤–∞:")
    print("python3 train.py -s data/dataset -r 1 -m output/dataset --config_file config/gaussian_dataset/train.json")
    print("\n–û–∂–∏–¥–∞–µ–º:")
    print("- ‚úÖ Object loss: 0.1-2.0 (–≤–º–µ—Å—Ç–æ 85-98)")
    print("- ‚úÖ –†–∞–∑–º–µ—Ä –º–∞—Å–æ–∫: (H, W) –≤–º–µ—Å—Ç–æ (H, W, 3)")
    print("- ‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è: [0, 1] –≤–º–µ—Å—Ç–æ [0, 102, 221, 225]")