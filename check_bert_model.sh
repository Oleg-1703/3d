#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ bert-base-uncased

BERT_PATH="/root/autodl-tmp/3d_v2/bert-base-uncased"

echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ bert-base-uncased ==="
echo "–ü—É—Ç—å: $BERT_PATH"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -d "$BERT_PATH" ]; then
    echo "‚ùå –ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $BERT_PATH"
    echo ""
    echo "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ —Å bert –≤ –∫–æ—Ä–Ω–µ:"
    find /root/autodl-tmp/3d_v2 -name "*bert*" -type d 2>/dev/null
    echo ""
    echo "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:"
    echo "1. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –ø–∞–ø–∫—É —Å –º–æ–¥–µ–ª—å—é –≤ $BERT_PATH"
    echo "2. –°–æ–∑–¥–∞–π—Ç–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É: ln -s /–ø—É—Ç—å/–∫/–≤–∞—à–µ–π/bert-–º–æ–¥–µ–ª–∏ $BERT_PATH"
    exit 1
fi

echo "‚úì –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω–∞"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏
echo ""
echo "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:"
ls -la "$BERT_PATH"

echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:"

# –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è BERT
REQUIRED_FILES=(
    "config.json"
    "pytorch_model.bin"
    "tokenizer.json" 
    "vocab.txt"
    "tokenizer_config.json"
)

OPTIONAL_FILES=(
    "special_tokens_map.json"
    "pytorch_model.bin.index.json"
    "model.safetensors"
)

missing_files=0

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$BERT_PATH/$file" ]; then
        echo "‚úì $file"
    else
        echo "‚ùå $file (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)"
        missing_files=$((missing_files + 1))
    fi
done

echo ""
echo "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:"
for file in "${OPTIONAL_FILES[@]}"; do
    if [ -f "$BERT_PATH/$file" ]; then
        echo "‚úì $file"
    else
        echo "- $file (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
    fi
done

if [ $missing_files -gt 0 ]; then
    echo ""
    echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç $missing_files –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    echo "–ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    echo ""
    echo "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å —Å –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
echo ""
echo "–†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:"
for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$BERT_PATH/$file" ]; then
        size=$(stat -c%s "$BERT_PATH/$file" 2>/dev/null || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        echo "$file: $size –±–∞–π—Ç"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ config.json
echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ config.json:"
if [ -f "$BERT_PATH/config.json" ]; then
    python3 -c "
import json
try:
    with open('$BERT_PATH/config.json', 'r') as f:
        config = json.load(f)
    
    print('‚úì config.json –≤–∞–ª–∏–¥–µ–Ω')
    print(f'  –ú–æ–¥–µ–ª—å: {config.get(\"model_type\", \"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\")}')
    print(f'  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {config.get(\"architectures\", [\"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\"])[0]}')
    print(f'  Vocab size: {config.get(\"vocab_size\", \"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\")}')
    
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.json: {e}')
    exit(1)
"
else
    echo "‚ùå config.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
echo ""
echo "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ==="

python3 -c "
import torch
from transformers import AutoTokenizer, BertModel

bert_path = '$BERT_PATH'

try:
    print('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞...')
    tokenizer = AutoTokenizer.from_pretrained(bert_path, local_files_only=True)
    print('‚úì –¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω')
    
    print('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...')
    model = BertModel.from_pretrained(bert_path, local_files_only=True)
    print('‚úì –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
    
    # –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã
    print('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
    test_text = 'Hello world'
    inputs = tokenizer(test_text, return_tensors='pt')
    
    with torch.no_grad():
        outputs = model(**inputs)
    
    print('‚úì –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    print(f'  –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: \"{test_text}\"')
    print(f'  –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–∞: {outputs.last_hidden_state.shape}')
    
    print('')
    print('üéâ –ú–æ–¥–µ–ª—å bert-base-uncased –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!')
    
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    print('')
    print('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:')
    print('1. –ù–µ–ø–æ–ª–Ω–∞—è –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å')
    print('2. –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è transformers')
    print('3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏')
    exit(1)
"

echo ""
echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ==="