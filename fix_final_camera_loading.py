#!/usr/bin/env python3
"""
–û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–∞–º–µ—Ä
"""

def fix_camera_loading():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø—É—Å—Ç—ã–º scene.getTrainCameras()"""
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º utils/camera_utils.py
    print("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï utils/camera_utils.py ===")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('utils/camera_utils.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º backup
    with open('utils/camera_utils.py.final_fix.backup', 'w', encoding='utf-8') as f:
        f.write(content)
    
    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadCam –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    lines = content.split('\n')
    new_lines = []
    
    for i, line in enumerate(lines):
        new_lines.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –≤ cameraList_from_camInfos
        if 'def cameraList_from_camInfos(cam_infos, resolution_scale, args):' in line:
            new_lines.extend([
                '    print(f"üì∏ cameraList_from_camInfos: –ø–æ–ª—É—á–µ–Ω–æ {len(cam_infos)} cam_infos")',
                '    if len(cam_infos) == 0:',
                '        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: cam_infos –ø—É—Å—Ç–æ–π –≤ cameraList_from_camInfos!")',
                '        return []',
                ''
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –≤ —Ü–∏–∫–ª –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–µ—Ä
        elif 'for id, c in enumerate(cam_infos):' in line:
            new_lines.extend([
                '        print(f"  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É {id}: {c.image_name}")',
                ''
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –≤ –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ cameraList_from_camInfos
        elif 'return camera_list' in line and 'cameraList_from_camInfos' in ''.join(lines[max(0, i-20):i]):
            new_lines.insert(-1, '    print(f"‚úÖ cameraList_from_camInfos: —Å–æ–∑–¥–∞–Ω–æ {len(camera_list)} –∫–∞–º–µ—Ä")')
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('utils/camera_utils.py', 'w', encoding='utf-8') as f:
        f.write('\n'.join(new_lines))
    
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞ –≤ utils/camera_utils.py")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º scene/__init__.py
    print("\n=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï scene/__init__.py ===")
    
    with open('scene/__init__.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    with open('scene/__init__.py.final_fix.backup', 'w', encoding='utf-8') as f:
        f.write(content)
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É
    old_loading = '''        for resolution_scale in resolution_scales:
            print("Loading Training Cameras")
            self.train_cameras[resolution_scale] = cameraList_from_camInfos(scene_info.train_cameras, resolution_scale, args)
            print("Loading Test Cameras")
            self.test_cameras[resolution_scale] = cameraList_from_camInfos(scene_info.test_cameras, resolution_scale, args)'''
    
    new_loading = '''        for resolution_scale in resolution_scales:
            print(f"Loading Training Cameras (scale={resolution_scale})")
            print(f"  scene_info.train_cameras: {len(scene_info.train_cameras)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            if len(scene_info.train_cameras) == 0:
                print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: scene_info.train_cameras –ø—É—Å—Ç–æ–π!")
                raise RuntimeError("–ù–µ—Ç –∫–∞–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤ scene_info")
            
            self.train_cameras[resolution_scale] = cameraList_from_camInfos(scene_info.train_cameras, resolution_scale, args)
            print(f"  –°–æ–∑–¥–∞–Ω–æ train_cameras: {len(self.train_cameras[resolution_scale])} –∫–∞–º–µ—Ä")
            
            print(f"Loading Test Cameras (scale={resolution_scale})")
            print(f"  scene_info.test_cameras: {len(scene_info.test_cameras)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            self.test_cameras[resolution_scale] = cameraList_from_camInfos(scene_info.test_cameras, resolution_scale, args)
            print(f"  –°–æ–∑–¥–∞–Ω–æ test_cameras: {len(self.test_cameras[resolution_scale])} –∫–∞–º–µ—Ä")
            
            if len(self.train_cameras[resolution_scale]) == 0:
                print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: self.train_cameras –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ cameraList_from_camInfos!")
                raise RuntimeError("–ö–∞–º–µ—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Scene")'''
    
    if old_loading in content:
        content = content.replace(old_loading, new_loading)
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–µ—Ä")
    else:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã")
    
    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –≤ getTrainCameras
    old_get_train = '''    def getTrainCameras(self, scale=1.0):
        return self.train_cameras[scale]'''
    
    new_get_train = '''    def getTrainCameras(self, scale=1.0):
        cameras = self.train_cameras[scale]
        print(f"üéØ getTrainCameras(scale={scale}): –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {len(cameras)} –∫–∞–º–µ—Ä")
        if len(cameras) == 0:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: getTrainCameras –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫!")
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—à—Ç–∞–±—ã: {list(self.train_cameras.keys())}")
            for s, cams in self.train_cameras.items():
                print(f"     scale {s}: {len(cams)} –∫–∞–º–µ—Ä")
        return cameras'''
    
    if old_get_train in content:
        content = content.replace(old_get_train, new_get_train)
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞ –≤ getTrainCameras")
    else:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è getTrainCameras –¥–ª—è –∑–∞–º–µ–Ω—ã")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('scene/__init__.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ scene/__init__.py")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º train.py –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    print("\n=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï train.py ===")
    
    with open('train.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    with open('train.py.final_fix.backup', 'w', encoding='utf-8') as f:
        f.write(content)
    
    # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –º–µ—Å—Ç–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    old_viewpoint = '''        # Pick a random Camera
        if not viewpoint_stack:
            viewpoint_stack = scene.getTrainCameras().copy()
        viewpoint_cam = viewpoint_stack.pop(randint(0, len(viewpoint_stack)-1))'''
    
    new_viewpoint = '''        # Pick a random Camera
        if not viewpoint_stack:
            viewpoint_stack = scene.getTrainCameras().copy()
            print(f"üé≤ –ó–∞–≥—Ä—É–∂–µ–Ω viewpoint_stack: {len(viewpoint_stack)} –∫–∞–º–µ—Ä")
            if len(viewpoint_stack) == 0:
                print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: viewpoint_stack –ø—É—Å—Ç–æ–π!")
                print("   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ scene.getTrainCameras() –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                raise RuntimeError("–ù–µ—Ç –∫–∞–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"üéØ –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞–º–µ—Ä—É –∏–∑ {len(viewpoint_stack)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        viewpoint_cam = viewpoint_stack.pop(randint(0, len(viewpoint_stack)-1))
        print(f"   –í—ã–±—Ä–∞–Ω–∞ –∫–∞–º–µ—Ä–∞: {viewpoint_cam.image_name}")'''
    
    if old_viewpoint in content:
        content = content.replace(old_viewpoint, new_viewpoint)
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–º–µ—Ä—ã")
    else:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –±–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–º–µ—Ä—ã –¥–ª—è –∑–∞–º–µ–Ω—ã")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('train.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ train.py")
    
    print("\nüéØ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!")
    print("\n–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print("python3 train.py -s data/dataset1024 -r 1 -m output/dataset1024 --config_file config/gaussian_dataset/train.json")
    print("\n–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞–∂–µ—Ç –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ç–µ—Ä—è—é—Ç—Å—è –∫–∞–º–µ—Ä—ã.")

if __name__ == "__main__":
    fix_camera_loading()