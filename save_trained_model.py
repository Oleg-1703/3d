#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –æ–±—É—á–∏–ª–∞—Å—å –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
"""

import sys
import torch
import os
from argparse import ArgumentParser, Namespace

sys.path.append('.')
from scene import Scene, GaussianModel
from arguments import ModelParams, PipelineParams, OptimizationParams
from utils.general_utils import safe_state

def save_model_manually(model_path, output_iteration=30000):
    """–†—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏"""
    
    print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ {model_path}...")
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    class Args:
        source_path = "data/dataset"
        model_path = model_path
        images = "images"
        eval = False
        resolution = 1
        white_background = False
        data_device = "cuda"
        sh_degree = 3
    
    args = Args()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        gaussians = GaussianModel(args.sh_degree)
        scene = Scene(ModelParams().extract(args), gaussians, shuffle=False)
        
        print(f"‚úì –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {gaussians.get_xyz.shape[0]} —Ç–æ—á–µ–∫")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_path = os.path.join(model_path, f"point_cloud/iteration_{output_iteration}")
        os.makedirs(save_path, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º point cloud
        ply_path = os.path.join(save_path, "point_cloud.ply")
        gaussians.save_ply(ply_path)
        print(f"‚úì Point cloud —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {ply_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å object IDs –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            ply_with_objects_path = os.path.join(save_path, "point_cloud_with_objects.ply")
            gaussians.save_ply_with_object_id(ply_with_objects_path)
            print(f"‚úì Point cloud —Å object IDs —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {ply_with_objects_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å object IDs: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –µ—Å—Ç—å
        classifier_path = os.path.join(save_path, "classifier.pth")
        if os.path.exists(classifier_path):
            print(f"‚úì –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {classifier_path}")
        else:
            print(f"‚ùå –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {classifier_path}")
        
        print(f"\nüéâ –ú–û–î–ï–õ–¨ –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù–ê!")
        print(f"üìÅ –ü–∞–ø–∫–∞: {save_path}")
        print(f"üìÑ –§–∞–π–ª—ã:")
        for file in os.listdir(save_path):
            file_path = os.path.join(save_path, file)
            size = os.path.getsize(file_path) / (1024*1024)  # MB
            print(f"   {file} ({size:.1f} MB)")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("-m", "--model_path", required=True, help="–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏")
    parser.add_argument("-i", "--iteration", type=int, default=30000, help="–ò—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    args = parser.parse_args()
    
    if save_model_manually(args.model_path, args.iteration):
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å:")
        print(f"python3 render.py -m {args.model_path} --num_classes 2")
    else:
        print("\n‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
