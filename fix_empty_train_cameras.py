#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—É—Å—Ç—ã–º train_cam_infos
"""

def patch_readColmapSceneInfo():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–ª–∞–¥–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä"""
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('scene/dataset_readers.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º backup
    with open('scene/dataset_readers.py.train_cameras_fix.backup', 'w', encoding='utf-8') as f:
        f.write(content)
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –≥–¥–µ —Å–æ–∑–¥–∞—é—Ç—Å—è train_cam_infos –∏ test_cam_infos
    old_split_logic = '''    if eval:
        train_cam_infos = [c for idx, c in enumerate(cam_infos) if idx % 4 != 0]
        test_cam_infos = [c for idx, c in enumerate(cam_infos) if idx % 4 == 0]
    else:
        train_cam_infos = cam_infos
        test_cam_infos = []'''
    
    new_split_logic = '''    print(f"üîç –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–º–µ—Ä: {len(cam_infos)}")
    for i, cam in enumerate(cam_infos[:3]):
        print(f"  –ö–∞–º–µ—Ä–∞ {i}: {cam.image_name}")
    
    if eval:
        train_cam_infos = [c for idx, c in enumerate(cam_infos) if idx % 4 != 0]
        test_cam_infos = [c for idx, c in enumerate(cam_infos) if idx % 4 == 0]
        print(f"üìä eval=True: train={len(train_cam_infos)}, test={len(test_cam_infos)}")
    else:
        train_cam_infos = cam_infos
        test_cam_infos = []
        print(f"üìä eval=False: train={len(train_cam_infos)}, test={len(test_cam_infos)}")
    
    if len(train_cam_infos) == 0:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: train_cam_infos –ø—É—Å—Ç–æ–π!")
        print(f"   eval={eval}, len(cam_infos)={len(cam_infos)}")
        if eval and len(cam_infos) > 0:
            print("   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∫–∞–º–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            train_cam_infos = cam_infos
        else:
            raise RuntimeError("–ù–µ—Ç –∫–∞–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É
    if old_split_logic in content:
        content = content.replace(old_split_logic, new_split_logic)
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä")
    else:
        print("‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if 'train_cam_infos = [c for idx, c in enumerate(cam_infos) if idx % 4 != 0]' in line:
                # –ù–∞—à–ª–∏ –º–µ—Å—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –ø–µ—Ä–µ–¥ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
                debug_lines = [
                    '    print(f"üîç –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–º–µ—Ä: {len(cam_infos)}")',
                    '    for j, cam in enumerate(cam_infos[:3]):',
                    '        print(f"  –ö–∞–º–µ—Ä–∞ {j}: {cam.image_name}")',
                    '    '
                ]
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É
                lines[i:i] = debug_lines
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                for j in range(i+len(debug_lines), min(i+len(debug_lines)+10, len(lines))):
                    if 'test_cam_infos = []' in lines[j]:
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
                        check_lines = [
                            '    ',
                            '    print(f"üìä –ö–∞–º–µ—Ä—ã: train={len(train_cam_infos)}, test={len(test_cam_infos)}")',
                            '    if len(train_cam_infos) == 0:',
                            '        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: train_cam_infos –ø—É—Å—Ç–æ–π!")',
                            '        if eval and len(cam_infos) > 0:',
                            '            print("   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∫–∞–º–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")',
                            '            train_cam_infos = cam_infos',
                            '        else:',
                            '            raise RuntimeError("–ù–µ—Ç –∫–∞–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")'
                        ]
                        lines[j+1:j+1] = check_lines
                        break
                
                content = '\n'.join(lines)
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä")
                break
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            return False
    
    # –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º getNerfppNorm –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤
    old_getnerfpp = '''def getNerfppNorm(cam_info):
    def get_center_and_diag(cam_centers):
        cam_centers = np.hstack(cam_centers)
        avg_cam_center = np.mean(cam_centers, axis=1, keepdims=True)
        center = avg_cam_center
        dist = np.linalg.norm(cam_centers - center, axis=0, keepdims=True)
        diagonal = np.max(dist)
        return center.flatten(), diagonal

    cam_centers = []

    for cam in cam_info:
        W2C = getWorld2View2(cam.R, cam.T)
        C2W = np.linalg.inv(W2C)
        cam_centers.append(C2W[:3, 3:4])

    center, diagonal = get_center_and_diag(cam_centers)
    radius = diagonal * 1.1

    translate = -center

    return {"translate": translate, "radius": radius}'''
    
    new_getnerfpp = '''def getNerfppNorm(cam_info):
    def get_center_and_diag(cam_centers):
        if len(cam_centers) == 0:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä")
            return np.array([0.0, 0.0, 0.0]), 1.0
            
        cam_centers = np.hstack(cam_centers)
        avg_cam_center = np.mean(cam_centers, axis=1, keepdims=True)
        center = avg_cam_center
        dist = np.linalg.norm(cam_centers - center, axis=0, keepdims=True)
        diagonal = np.max(dist)
        return center.flatten(), diagonal

    if len(cam_info) == 0:
        print("‚ùå getNerfppNorm: –ù–µ—Ç –∫–∞–º–µ—Ä –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
        return {"translate": np.array([0.0, 0.0, 0.0]), "radius": 1.0}

    cam_centers = []

    for cam in cam_info:
        try:
            W2C = getWorld2View2(cam.R, cam.T)
            C2W = np.linalg.inv(W2C)
            cam_centers.append(C2W[:3, 3:4])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–º–µ—Ä—ã {getattr(cam, 'image_name', 'unknown')}: {e}")
            continue

    if len(cam_centers) == 0:
        print("‚ùå getNerfppNorm: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—Ç—Ä—ã –∫–∞–º–µ—Ä")
        return {"translate": np.array([0.0, 0.0, 0.0]), "radius": 1.0}

    center, diagonal = get_center_and_diag(cam_centers)
    radius = diagonal * 1.1

    translate = -center

    print(f"‚úÖ NeRF –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: {len(cam_centers)} –∫–∞–º–µ—Ä, —Ä–∞–¥–∏—É—Å={radius:.3f}")
    return {"translate": translate, "radius": radius}'''
    
    # –ó–∞–º–µ–Ω—è–µ–º getNerfppNorm
    if old_getnerfpp in content:
        content = content.replace(old_getnerfpp, new_getnerfpp)
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è getNerfppNorm")
    else:
        print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è getNerfppNorm –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('scene/dataset_readers.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ scene/dataset_readers.py")
    return True

def check_train_args():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ–±—É—á–µ–Ω–∏—è"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –ê–†–ì–£–ú–ï–ù–¢–û–í –û–ë–£–ß–ï–ù–ò–Ø ===")
    print("–ö–æ–º–∞–Ω–¥–∞: python3 train.py -s data/dataset1024 -r 1 -m output/dataset1024 --config_file config/gaussian_dataset/train.json")
    print("\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print("  --eval: –ù–ï –£–ö–ê–ó–ê–ù (eval=False)")
    print("  -r 1: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ = 1")
    print("  –ó–Ω–∞—á–∏—Ç train_cam_infos –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å = cam_infos")
    print("\n–ï—Å–ª–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:")
    print("  python3 train.py -s data/dataset1024 -r 1 -m output/dataset1024 --config_file config/gaussian_dataset/train.json --eval")

if __name__ == "__main__":
    patch_readColmapSceneInfo()
    check_train_args()