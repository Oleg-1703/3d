#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ scene/dataset_readers.py –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å PINHOLE –º–æ–¥–µ–ª—è–º–∏
"""

def update_dataset_readers():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç readColmapSceneInfo –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ª—å–∫–æ PINHOLE –º–æ–¥–µ–ª–µ–π"""
    
    new_readColmapSceneInfo = '''
def readColmapSceneInfo(path, images, eval, object_path, n_views=None, random_init=False, train_split=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç COLMAP —Å—Ü–µ–Ω—É. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ PINHOLE –∏ SIMPLE_PINHOLE –º–æ–¥–µ–ª–∏.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é sparse –º–æ–¥–µ–ª—å.
    """
    
    def try_load_cameras(sparse_path_name):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–µ—Ä—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        try:
            cameras_extrinsic_file = os.path.join(path, sparse_path_name, "images.bin")
            cameras_intrinsic_file = os.path.join(path, sparse_path_name, "cameras.bin")
            
            if not os.path.exists(cameras_extrinsic_file) or not os.path.exists(cameras_intrinsic_file):
                return None, None, sparse_path_name
                
            cam_extrinsics = read_extrinsics_binary(cameras_extrinsic_file)
            cam_intrinsics = read_intrinsics_binary(cameras_intrinsic_file)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞–º–µ—Ä—ã –∏–∑ {sparse_path_name}/")
            return cam_extrinsics, cam_intrinsics, sparse_path_name
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ {sparse_path_name}/: {e}")
            return None, None, sparse_path_name
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–µ—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    cam_extrinsics, cam_intrinsics, used_sparse = None, None, None
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º sparse/0 (—Ä–µ–∑—É–ª—å—Ç–∞—Ç image_undistorter)
    if cam_extrinsics is None:
        cam_extrinsics, cam_intrinsics, used_sparse = try_load_cameras("sparse/0")
    
    # 2. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º sparse_fixed/0
    if cam_extrinsics is None:
        cam_extrinsics, cam_intrinsics, used_sparse = try_load_cameras("sparse_fixed/0")
    
    # 3. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    if cam_extrinsics is None:
        try:
            cameras_extrinsic_file = os.path.join(path, "sparse/0", "images.txt")
            cameras_intrinsic_file = os.path.join(path, "sparse/0", "cameras.txt")
            cam_extrinsics = read_extrinsics_text(cameras_extrinsic_file)
            cam_intrinsics = read_intrinsics_text(cameras_intrinsic_file)
            used_sparse = "sparse/0 (text)"
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞–º–µ—Ä—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–µ—Ä—ã: {e}")
            raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã COLMAP –∫–∞–º–µ—Ä")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –∫–∞–º–µ—Ä
    incompatible_cameras = []
    for camera_id, camera in cam_intrinsics.items():
        if camera.model not in ["PINHOLE", "SIMPLE_PINHOLE"]:
            incompatible_cameras.append(f"–ö–∞–º–µ—Ä–∞ {camera_id}: {camera.model}")
    
    if incompatible_cameras:
        error_msg = "–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –º–æ–¥–µ–ª–∏ –∫–∞–º–µ—Ä:\\n" + "\\n".join(incompatible_cameras)
        error_msg += "\\n\\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ convert_fixed.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
        raise RuntimeError(error_msg)
    
    reading_dir = "images" if images == None else images
    object_dir = "objects" if object_path == None else object_path
    
    cam_infos_unsorted = readColmapCameras(
        cam_extrinsics=cam_extrinsics, 
        cam_intrinsics=cam_intrinsics, 
        images_folder=os.path.join(path, reading_dir), 
        objects_folder=os.path.join(path, object_dir)
    )
    
    cam_infos = sorted(cam_infos_unsorted.copy(), key=lambda x: x.image_name)
    
    if len(cam_infos) == 0:
        raise RuntimeError(f"–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã –∏–∑ {used_sparse}")
    
    print(f"üì∑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cam_infos)} –∫–∞–º–µ—Ä –∏–∑ {used_sparse}")
    
    if eval:
        train_cam_infos = [c for idx, c in enumerate(cam_infos) if idx % 4 != 0]
        test_cam_infos = [c for idx, c in enumerate(cam_infos) if idx % 4 == 0]
    else:
        train_cam_infos = cam_infos
        test_cam_infos = []

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if n_views is not None:
        if train_split is not None:
            n_train = int(n_views * train_split)
            n_test = n_views - n_train
            train_cam_infos = train_cam_infos[:n_train]
            test_cam_infos = test_cam_infos[:n_test] if test_cam_infos else []
        else:
            train_cam_infos = train_cam_infos[:n_views]
    
    if len(train_cam_infos) == 0:
        raise RuntimeError("–ù–µ—Ç –∫–∞–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            
    nerf_normalization = getNerfppNorm(train_cam_infos)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–µ—á–Ω–æ–µ –æ–±–ª–∞–∫–æ
    ply_path = None
    sparse_base = used_sparse.split()[0] if " " in used_sparse else used_sparse
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ .ply —Ñ–∞–π–ª
    for potential_ply in [
        os.path.join(path, sparse_base, "points3D.ply"),
        os.path.join(path, "sparse/0/points3D.ply"),
        os.path.join(path, "sparse_fixed/0/points3D.ply")
    ]:
        if os.path.exists(potential_ply):
            ply_path = potential_ply
            break
    
    # –ï—Å–ª–∏ .ply –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ .bin
    if ply_path is None:
        ply_path = os.path.join(path, "sparse/0/points3D.ply")
        print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º points3D.bin –≤ .ply...")
        
        try:
            for potential_bin in [
                os.path.join(path, sparse_base, "points3D.bin"),
                os.path.join(path, "sparse/0/points3D.bin"),
                os.path.join(path, "sparse_fixed/0/points3D.bin")
            ]:
                if os.path.exists(potential_bin):
                    xyz, rgb, _ = read_points3D_binary(potential_bin)
                    storePly(ply_path, xyz, rgb)
                    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω {potential_bin} -> {ply_path}")
                    break
            else:
                # –ü—Ä–æ–±—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                txt_path = os.path.join(path, "sparse/0/points3D.txt")
                if os.path.exists(txt_path):
                    xyz, rgb, _ = read_points3D_text(txt_path)
                    storePly(ply_path, xyz, rgb)
                    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω {txt_path} -> {ply_path}")
                else:
                    print("‚ö†Ô∏è –§–∞–π–ª points3D –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏")
                    # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏ –∫–∞–∫ fallback
                    num_pts = 1000
                    xyz = np.random.random((num_pts, 3)) * 2.0 - 1.0
                    rgb = np.random.randint(0, 255, (num_pts, 3))
                    storePly(ply_path, xyz, rgb)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ points3D: {e}")

    try:
        pcd = fetchPly(ply_path)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ—á–µ—á–Ω–æ–µ –æ–±–ª–∞–∫–æ: {len(pcd.points)} —Ç–æ—á–µ–∫")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—á–µ—á–Ω–æ–µ –æ–±–ª–∞–∫–æ: {e}")
        pcd = None

    scene_info = SceneInfo(
        point_cloud=pcd,
        train_cameras=train_cam_infos,
        test_cameras=test_cam_infos,
        nerf_normalization=nerf_normalization,
        ply_path=ply_path
    )
    return scene_info
'''