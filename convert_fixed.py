#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π COLMAP –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è 3D Gaussian Splatting
–°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–µ–∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (PINHOLE –º–æ–¥–µ–ª—å)
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ
"""

import os
import logging
import shutil
import sys
from argparse import ArgumentParser
import subprocess

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s] %(levelname)s: %(message)s',
        datefmt='%H:%M:%S'
    )

def check_colmap_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ COLMAP"""
    try:
        result = subprocess.run(['colmap', '--help'], 
                              capture_output=True, text=True, timeout=10)
        return result.returncode == 0
    except:
        return False

def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    logging.info(f"üîÑ {description}")
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd) if isinstance(cmd, list) else cmd}")
    
    try:
        if isinstance(cmd, str):
            exit_code = os.system(cmd)
        else:
            result = subprocess.run(cmd, check=True)
            exit_code = result.returncode
            
        if exit_code != 0:
            logging.error(f"‚ùå {description} –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –∫–æ–¥–æ–º {exit_code}")
            return False
        else:
            logging.info(f"‚úÖ {description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå {description} –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        return False
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {description}: {e}")
        return False

def main():
    setup_logging()
    
    parser = ArgumentParser("COLMAP converter –¥–ª—è 3D Gaussian Splatting")
    parser.add_argument("--no_gpu", action='store_true', help="–û—Ç–∫–ª—é—á–∏—Ç—å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
    parser.add_argument("--skip_matching", action='store_true', help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å feature matching")
    parser.add_argument("--source_path", "-s", required=True, type=str, help="–ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É")
    parser.add_argument("--camera", default="PINHOLE", type=str, 
                       help="–ú–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã (PINHOLE —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è 3DGS)")
    parser.add_argument("--colmap_executable", default="", type=str, help="–ü—É—Ç—å –∫ COLMAP")
    parser.add_argument("--resize", action="store_true", help="–°–æ–∑–¥–∞—Ç—å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏")
    parser.add_argument("--magick_executable", default="", type=str, help="–ü—É—Ç—å –∫ ImageMagick")
    parser.add_argument("--quality", default="high", choices=["low", "medium", "high"], 
                       help="–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
    colmap_command = f'"{args.colmap_executable}"' if args.colmap_executable else "colmap"
    magick_command = f'"{args.magick_executable}"' if args.magick_executable else "magick"
    use_gpu = 0 if args.no_gpu else 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ COLMAP
    if not check_colmap_installation():
        logging.error("‚ùå COLMAP –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ COLMAP –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å —á–µ—Ä–µ–∑ --colmap_executable")
        sys.exit(1)
    
    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ COLMAP –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –¥–ª—è 3DGS")
    logging.info(f"üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫: {args.source_path}")
    logging.info(f"üéØ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if use_gpu else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}")
    logging.info(f"üì∑ –ú–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã: {args.camera}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    input_path = os.path.join(args.source_path, "input")
    if not os.path.exists(input_path):
        logging.error(f"‚ùå –ü–∞–ø–∫–∞ {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        sys.exit(1)
    
    image_files = [f for f in os.listdir(input_path) 
                   if f.lower().endswith(('.jpg', '.jpeg', '.png', '.tiff', '.bmp'))]
    if len(image_files) == 0:
        logging.error(f"‚ùå –í –ø–∞–ø–∫–µ {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        sys.exit(1)
    
    logging.info(f"üì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
    
    # === –≠–¢–ê–ü 1: FEATURE EXTRACTION –ò MATCHING ===
    if not args.skip_matching:
        os.makedirs(args.source_path + "/distorted/sparse", exist_ok=True)
        
        # Feature extraction —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        feat_extraction_cmd = f"{colmap_command} feature_extractor " \
            f"--database_path {args.source_path}/distorted/database.db " \
            f"--image_path {args.source_path}/input " \
            f"--ImageReader.single_camera 1 " \
            f"--ImageReader.camera_model {args.camera} " \
            f"--SiftExtraction.use_gpu {use_gpu} " \
            f"--SiftExtraction.max_image_size 3200 " \
            f"--SiftExtraction.max_num_features 8192"
        
        if not run_command(feat_extraction_cmd, "Feature extraction"):
            sys.exit(1)
        
        # Feature matching —Å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º
        feat_matching_cmd = f"{colmap_command} exhaustive_matcher " \
            f"--database_path {args.source_path}/distorted/database.db " \
            f"--SiftMatching.use_gpu {use_gpu} " \
            f"--SiftMatching.max_ratio 0.8 " \
            f"--SiftMatching.max_distance 0.7"
        
        if not run_command(feat_matching_cmd, "Feature matching"):
            sys.exit(1)
        
        # Bundle adjustment (mapper) —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mapper_cmd = f"{colmap_command} mapper " \
            f"--database_path {args.source_path}/distorted/database.db " \
            f"--image_path {args.source_path}/input " \
            f"--output_path {args.source_path}/distorted/sparse " \
            f"--Mapper.ba_refine_focal_length 1 " \
            f"--Mapper.ba_refine_principal_point 1 " \
            f"--Mapper.ba_refine_extra_params 1"
        
        if not run_command(mapper_cmd, "Bundle adjustment (Mapper)"):
            sys.exit(1)
    
    # === –≠–¢–ê–ü 2: IMAGE UNDISTORTION (–ö–õ–Æ–ß–ï–í–û–ô –î–õ–Ø 3DGS) ===
    logging.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–∏—Å–∫–∞–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è 3DGS...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    sparse_input = os.path.join(args.source_path, "distorted/sparse/0")
    if not os.path.exists(sparse_input):
        logging.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {sparse_input}")
        sys.exit(1)
    
    # Image undistorter - —Å–æ–∑–¥–∞–µ—Ç PINHOLE –º–æ–¥–µ–ª—å –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π
    img_undist_cmd = f"{colmap_command} image_undistorter " \
        f"--image_path {args.source_path}/input " \
        f"--input_path {sparse_input} " \
        f"--output_path {args.source_path} " \
        f"--output_type COLMAP " \
        f"--max_image_size 2048"
    
    if not run_command(img_undist_cmd, "Image undistortion"):
        sys.exit(1)
    
    # === –≠–¢–ê–ü 3: –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –§–ê–ô–õ–û–í –î–õ–Ø 3DGS ===
    logging.info("üìÅ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è 3DGS...")
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã sparse –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ
    sparse_files = os.listdir(args.source_path + "/sparse")
    os.makedirs(args.source_path + "/sparse/0", exist_ok=True)
    
    for file in sparse_files:
        if file == '0':
            continue
        source_file = os.path.join(args.source_path, "sparse", file)
        destination_file = os.path.join(args.source_path, "sparse", "0", file)
        if os.path.exists(source_file):
            shutil.move(source_file, destination_file)
            logging.info(f"üìÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    required_files = ["cameras.bin", "images.bin", "points3D.bin"]
    sparse_0_path = os.path.join(args.source_path, "sparse/0")
    
    for req_file in required_files:
        file_path = os.path.join(sparse_0_path, req_file)
        if os.path.exists(file_path):
            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω: {req_file}")
        else:
            logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {req_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –∫–∞–º–µ—Ä—ã...")
    try:
        import struct
        cameras_path = os.path.join(sparse_0_path, "cameras.bin")
        if os.path.exists(cameras_path):
            with open(cameras_path, 'rb') as f:
                num_cameras = struct.unpack('Q', f.read(8))[0]
                for i in range(num_cameras):
                    camera_id = struct.unpack('I', f.read(4))[0]
                    model_id = struct.unpack('I', f.read(4))[0]
                    width = struct.unpack('Q', f.read(8))[0]
                    height = struct.unpack('Q', f.read(8))[0]
                    
                    model_names = {0: "SIMPLE_PINHOLE", 1: "PINHOLE", 2: "SIMPLE_RADIAL", 4: "OPENCV"}
                    model_name = model_names.get(model_id, f"UNKNOWN_{model_id}")
                    
                    if model_id in [0, 1]:  # SIMPLE_PINHOLE –∏–ª–∏ PINHOLE
                        logging.info(f"‚úÖ –ö–∞–º–µ—Ä–∞ {camera_id}: {model_name} - —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å 3DGS")
                    else:
                        logging.warning(f"‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ {camera_id}: {model_name} - –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã: {e}")
    
    # === –≠–¢–ê–ü 4: –°–û–ó–î–ê–ù–ò–ï –£–ú–ï–ù–¨–®–ï–ù–ù–´–• –ö–û–ü–ò–ô (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û) ===
    if args.resize:
        logging.info("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —É–º–µ–Ω—å—à–µ–Ω–Ω—ã—Ö –∫–æ–ø–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        scales = [("images_2", "50%"), ("images_4", "25%"), ("images_8", "12.5%")]
        
        for folder, scale in scales:
            target_dir = os.path.join(args.source_path, folder)
            os.makedirs(target_dir, exist_ok=True)
            
            images_dir = os.path.join(args.source_path, "images")
            if os.path.exists(images_dir):
                image_files = os.listdir(images_dir)
                
                for image_file in image_files:
                    if image_file.lower().endswith(('.jpg', '.jpeg', '.png', '.tiff', '.bmp')):
                        source_file = os.path.join(images_dir, image_file)
                        dest_file = os.path.join(target_dir, image_file)
                        
                        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                        shutil.copy2(source_file, dest_file)
                        
                        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
                        resize_cmd = f"{magick_command} mogrify -resize {scale} {dest_file}"
                        if not run_command(resize_cmd, f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ {scale}"):
                            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä {image_file}")
                
                logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {folder} —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ {scale}")
    
    # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===
    logging.info("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è 3DGS
    expected_structure = {
        "images": "–ù–µ–∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        "sparse/0": "COLMAP –º–æ–¥–µ–ª—å (PINHOLE)",
        "input": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    }
    
    all_good = True
    for folder, description in expected_structure.items():
        path = os.path.join(args.source_path, folder)
        if os.path.exists(path):
            if folder == "images" or folder == "input":
                file_count = len([f for f in os.listdir(path) 
                                if f.lower().endswith(('.jpg', '.jpeg', '.png', '.tiff', '.bmp'))])
                logging.info(f"‚úÖ {description}: {file_count} —Ñ–∞–π–ª–æ–≤")
            else:
                logging.info(f"‚úÖ {description}: –Ω–∞–π–¥–µ–Ω")
        else:
            logging.error(f"‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {path}")
            all_good = False
    
    if all_good:
        logging.info("üéâ –£–°–ü–ï–•! –î–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è 3D Gaussian Splatting")
        logging.info(f"üìÅ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python3 train.py -s {args.source_path} -m output/model")
    else:
        logging.error("‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –≥–æ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        sys.exit(1)

if __name__ == "__main__":
    main()